name: CI

on:
  push:
    branches:
      - main
      - staging
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  CARGO_TERM_COLOR: always
  # renovate: datasource=crate depName=cargo-machete versioning=semver
  CARGO_MACHETE_VERSION: 0.7.0
  # renovate: datasource=crate depName=sqlx-cli versioning=semver
  SQLX_VERSION: 0.8.5
  # renovate: datasource=npm depName=pnpm
  PNPM_VERSION: 10.9.0

jobs:
  changed-files:
    name: Changed Files
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: tj-actions/changed-files@v45
        id: changed-files-frontend
        with:
          files: |
            app/**
            e2e/**
            public/**
            shared/**
            next.config.ts
            package.json
            package-lock.json
            pnpm-lock.yaml
            tsconfig.json
            prettier.config.js
            postcss.config.mjs
            eslint.config.mjs
            frontend.Dockerfile

      - uses: tj-actions/changed-files@v45
        id: changed-files-backend
        with:
          files: |
            src/**
            migrations/**
            .sqlx/**
            Cargo.toml
            backend.Dockerfile

      - uses: tj-actions/changed-files@v45
        id: changed-files-rust-lockfiles
        with:
          files: |
            Cargo.lock

    outputs:
      frontend: ${{ steps.changed-files-frontend.outputs.any_modified }}
      backend: ${{ steps.changed-files-backend.outputs.any_modified }}
      rust-lockfile: ${{ steps.changed-files-rust-lockfiles.outputs.any_modified }}

  backend-lint:
    name: Backend / Lint
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.backend == 'true' || needs.changed-files.outputs.rust-lockfile == 'true'

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt

      - uses: Swatinem/rust-cache@v2

      - uses: actions-rust-lang/rustfmt@v1

      - uses: giraffate/clippy-action@v1
        with:
          reporter: "github-pr-review"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clippy_flags: -- -D warnings

      - run: cargo doc --no-deps --document-private-items

  backend-deps:
    name: Backend / Dependencies
    runs-on: ubuntu-latest
    needs: changed-files
    if: github.event_name != 'pull_request' || needs.changed-files.outputs.rust-lockfile == 'true'

    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2

      - run: cargo install cargo-machete --vers ${CARGO_MACHETE_VERSION}
      - run: cargo machete

  backend-test:
    name: Backend / Test
    runs-on: ubuntu-latest
    needs: changed-files

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RUST_BACKTRACE: 1
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      RUSTFLAGS: "-D warnings -C instrument-coverage"

    steps:
      - uses: actions/checkout@v4

      - name: Skip if no backend changes
        if: needs.changed-files.outputs.backend != 'true' && needs.changed-files.outputs.rust-lockfile != 'true'
        run: exit 0

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - uses: Swatinem/rust-cache@v2

      - run: cargo install sqlx-cli --version ${SQLX_VERSION} --locked --no-default-features --features native-tls,postgres
      - run: cargo sqlx database create
      - run: sqlx migrate run
      - run: cargo sqlx prepare --check -- --all-targets

      - run: cargo test --all-features

  build-backend:
    name: Build Backend Binaries
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: needs.changed-files.outputs.backend == 'true' || needs.changed-files.outputs.rust-lockfile == 'true' || github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache"

      - run: cargo build

      # Build release binary if we're deploying to production
      - name: Build release binary
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: cargo build --release

      # Upload debug binary as artifact
      - name: Upload debug binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-debug
          path: target/debug/server
          retention-days: 1

      # Upload release binary as artifact if we're deploying to production
      - name: Upload release binary
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: backend-release
          path: target/release/server
          retention-days: 1

  frontend-lint:
    name: Frontend / Lint
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.frontend == 'true'

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json

      - run: pnpm install

      - run: pnpm lint
      - run: pnpm prettier

  frontend-unit-test:
    name: Frontend / Unit Test
    runs-on: ubuntu-latest
    needs: changed-files

    steps:
      - uses: actions/checkout@v4

      - name: Skip if no frontend changes
        if: needs.changed-files.outputs.frontend != 'true'
        run: exit 0

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json

      - run: pnpm install

      - run: pnpm test:unit

  e2e-test:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: [changed-files, build-backend]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RUST_BACKTRACE: 1
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      BACKEND_BINARY_PATH: ./target/debug/server

    steps:
      - uses: actions/checkout@v4

      - name: Skip if no frontend/backend changes
        if: needs.changed-files.outputs.frontend != 'true' && needs.changed-files.outputs.backend != 'true' && needs.changed-files.outputs.rust-lockfile != 'true'
        run: exit 0

      - uses: actions-rust-lang/setup-rust-toolchain@v1

      - run: echo "RUNNER_TEMP=${{ runner.temp }}" >> $GITHUB_ENV

      - name: Download backend binary
        uses: actions/download-artifact@v4
        with:
          name: backend-debug
          path: target/debug/

      - run: chmod +x target/debug/server

      - run: cargo install sqlx-cli --version ${SQLX_VERSION} --locked --no-default-features --features native-tls,postgres
      - run: cargo sqlx database create
      - run: sqlx migrate run

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json

      - run: pnpm install
      - run: pnpm playwright install --with-deps chromium

      - run: pnpm test:e2e

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: playwright-results/
          retention-days: 30

  frontend-deploy-storybook:
    name: Frontend / Deploy Storybook
    runs-on: ubuntu-latest
    needs: [frontend-unit-test]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - run: pnpm install --frozen-lockfile

      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          token: ${{ secrets.GITHUB_TOKEN }}
          buildScriptName: "build:storybook"
          exitOnceUploaded: true

  deploy-staging:
    name: Deploy (staging)
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-unit-test, frontend-deploy-storybook, e2e-test, build-backend]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'

    environment:
      name: staging
      url: https://learn-framer-university-api-staging.fly.dev

    steps:
      - uses: actions/checkout@v4

      - name: Skip if no relevant changes
        if: needs.changed-files.outputs.backend != 'true' && needs.changed-files.outputs.frontend != 'true' && needs.changed-files.outputs.rust-lockfile != 'true'
        run: exit 0

      - name: Download backend binary
        uses: actions/download-artifact@v4
        with:
          name: backend-debug
          path: target/debug/

      - run: chmod +x target/debug/server

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json

      - run: pnpm install

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy backend to staging
        run: flyctl deploy --config fly.backend.toml -a learn-framer-university-api-staging --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy frontend to staging
        run: flyctl deploy --config fly.frontend.toml -a learn-framer-university-staging --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-production:
    name: Deploy (production)
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-unit-test, e2e-test, build-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://learn.framer.university

    steps:
      - uses: actions/checkout@v4

      - name: Skip if no relevant changes
        if: needs.changed-files.outputs.backend != 'true' && needs.changed-files.outputs.frontend != 'true' && needs.changed-files.outputs.rust-lockfile != 'true'
        run: exit 0

      - name: Download release binary
        uses: actions/download-artifact@v4
        with:
          name: backend-release
          path: target/release/

      - run: chmod +x target/release/server

      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version-file: package.json

      - run: pnpm install

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy backend to production
        run: flyctl deploy --config fly.backend.toml -a learn-framer-university-api --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy frontend to production
        run: flyctl deploy --config fly.frontend.toml -a learn-framer-university --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
