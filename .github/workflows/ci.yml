name: CI

on:
    push:
        branches:
            - main
            - master

    pull_request:

concurrency:
    group: ci-${{ github.head_ref || github.ref }}
    cancel-in-progress: true

env:
    CARGO_TERM_COLOR: always
    CARGO_DENY_VERSION: 0.16.4
    CARGO_MACHETE_VERSION: 0.7.0
    NPM_VERSION: 11.1.0
    POSTGRES_VERSION: 17

jobs:
    changed-files:
        name: Changed Files
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                  persist-credentials: false

            - uses: tj-actions/changed-files@v45
              id: changed-files-non-js
              with:
                  files_ignore: |
                      app/**
                      e2e/**
                      public/**
                      tests/**
                      .eslintrc
                      package.json
                      package-lock.json

            - uses: tj-actions/changed-files@v45
              id: changed-files-non-rust
              with:
                  files_ignore: |
                      crates/**
                      migrations/**
                      src/**
                      build.rs
                      Cargo.lock
                      Cargo.toml

            - uses: tj-actions/changed-files@v45
              id: changed-files-rust-lockfile
              with:
                  files: Cargo.lock

        outputs:
            non-js: ${{ steps.changed-files-non-js.outputs.any_modified }}
            non-rust: ${{ steps.changed-files-non-rust.outputs.any_modified }}
            rust-lockfile: ${{ steps.changed-files-rust-lockfile.outputs.any_modified }}

    backend-lint:
        name: Backend / Lint
        runs-on: ubuntu-latest
        needs: changed-files
        if: needs.changed-files.outputs.non-js == 'true'

        env:
            RUSTFLAGS: "-D warnings"
            RUSTDOCFLAGS: "-D warnings"

        steps:
            - uses: actions/checkout@v4
              with:
                  persist-credentials: false

            - run: rustup component add rustfmt
            - run: rustup component add clippy

            - uses: Swatinem/rust-cache@v2

            - run: cargo fmt --check --all
            - run: cargo clippy --all-targets --all-features --workspace
            - run: cargo doc --no-deps --document-private-items

    backend-deps:
        name: Backend / Dependencies
        runs-on: ubuntu-latest
        needs: changed-files
        if: github.event_name != 'pull_request' || needs.changed-files.outputs.rust-lockfile == 'true'

        steps:
            - uses: actions/checkout@v4
              with:
                  persist-credentials: false

            - uses: Swatinem/rust-cache@v2

            - run: cargo install cargo-machete --vers ${CARGO_MACHETE_VERSION}
            - run: cargo machete

    backend-test:
        name: Backend / Test
        runs-on: ubuntu-latest
        needs: changed-files
        if: needs.changed-files.outputs.non-js == 'true'

        env:
            RUST_BACKTRACE: 1
            TEST_DATABASE_URL: postgres://postgres:postgres@localhost/postgres
            RUSTFLAGS: "-D warnings -Cinstrument-coverage"
            MALLOC_CONF: "background_thread:true,abort_conf:true,abort:true,junk:true"
            CARGO_TARGET_DIR: /mnt/target

        steps:
            - uses: actions/checkout@v4
              with:
                  persist-credentials: false

            - uses: Swatinem/rust-cache@v2
              with:
                  # Ensure that we cache from the right target directory. (See below
                  # for the details of how and when this gets created.)
                  workspaces: ". -> ${{ env.CARGO_TARGET_DIR }}"

            # Update `pg_dump` to the same version as the running PostgreSQL server
            - run: sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -v ${POSTGRES_VERSION} -i -p
            - run: sudo systemctl start postgresql.service
            - run: sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres'"

            # Create a working directory on /mnt, which is a larger temporary
            # filesystem than /, that we can then point our later commands to.
            - run: |
                  sudo mkdir ${CARGO_TARGET_DIR}
                  sudo chown $(id -u):$(id -g) ${CARGO_TARGET_DIR}

            - run: cargo build --tests --workspace
            - run: cargo test --workspace
