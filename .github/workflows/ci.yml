name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:

concurrency:
  group: ci-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_DENY_VERSION: 0.16.4
  CARGO_MACHETE_VERSION: 0.7.0
  NPM_VERSION: 11.1.0
  POSTGRES_VERSION: 17
  CI: true

jobs:
  changed-files:
    name: Changed Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: tj-actions/changed-files@v45
        id: changed-files-rust
        with:
          files: |
            crates/**
            migrations/**
            src/**
            build.rs
            Cargo.lock
            Cargo.toml

      - uses: tj-actions/changed-files@v45
        id: changed-files-js
        with:
          files: |
            app/**
            e2e/**
            public/**
            tests/**
            .gitignore
            .prettierignore
            eslint.config.mjs
            jest.config.ts
            jest.setup.ts
            next.config.ts
            playwright.config.ts
            postcss.config.mjs
            prettier.config.js
            tsconfig.json

      - uses: tj-actions/changed-files@v45
        id: changed-files-rust-lockfile
        with:
          files: Cargo.lock

    outputs:
      rust: ${{ steps.changed-files-rust.outputs.any_modified }}
      js: ${{ steps.changed-files-js.outputs.any_modified }}
      rust-lockfile: ${{ steps.changed-files-rust-lockfile.outputs.any_modified }}

  api:
    name: API / Checks
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.rust == 'true'

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RUSTFLAGS: "-D warnings -Cinstrument-coverage"
      RUSTDOCFLAGS: "-D warnings"
      RUST_BACKTRACE: 1
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost/postgres
      MALLOC_CONF: "background_thread:true,abort_conf:true,abort:true,junk:true"
      CARGO_TARGET_DIR: /mnt/target

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Rust Toolchain
        run: |
          rustup component add rustfmt
          rustup component add clippy

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ". -> ${{ env.CARGO_TARGET_DIR }}"

      - name: Setup Target Directory
        run: |
          sudo mkdir -p ${CARGO_TARGET_DIR}
          sudo chown $(id -u):$(id -g) ${CARGO_TARGET_DIR}

      - name: Check Formatting
        run: cargo fmt --check --all

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features --workspace

      - name: Generate Documentation
        run: cargo doc --no-deps --document-private-items

      - name: Check Dependencies
        if: github.event_name != 'pull_request' || needs.changed-files.outputs.rust-lockfile == 'true'
        run: |
          cargo install cargo-machete --vers ${CARGO_MACHETE_VERSION}
          cargo machete

      - name: Run Tests
        run: |
          cargo build --tests --workspace
          cargo test --workspace

  frontend:
    name: Frontend / Checks
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.js == 'true'
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: "npm"

      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Lint and Format
        run: |
          npm run lint
          npm run prettier

      - name: Unit Tests
        run: npm run test:unit

      - uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run E2E Tests
        run: npx playwright test

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: |
            playwright-results/
            test-results/
            coverage/
            junit.xml
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [changed-files, api, frontend]
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
    strategy:
      matrix:
        app: [api, frontend]
        include:
          - app: api
            condition: needs.changed-files.outputs.rust == 'true'
            config: fly.staging.api.toml
            dockerfile: staging.api.Dockerfile
          - app: frontend
            condition: needs.changed-files.outputs.js == 'true'
            config: fly.staging.frontend.toml
            dockerfile: staging.frontend.Dockerfile

    steps:
      - uses: actions/checkout@v4
        if: ${{ matrix.condition }}

      - uses: superfly/flyctl-actions/setup-flyctl@master
        if: ${{ matrix.condition }}

      - name: Deploy ${{ matrix.app }} to Staging
        if: ${{ matrix.condition }}
        run: flyctl deploy --remote-only --config ${{ matrix.config }} --dockerfile ${{ matrix.dockerfile }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [changed-files, api, frontend]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        app: [api, frontend]
        include:
          - app: api
            condition: needs.changed-files.outputs.rust == 'true'
            config: fly.api.toml
            dockerfile: api.Dockerfile
          - app: frontend
            condition: needs.changed-files.outputs.js == 'true'
            config: fly.frontend.toml
            dockerfile: frontend.Dockerfile

    steps:
      - uses: actions/checkout@v4
        if: ${{ matrix.condition }}

      - uses: superfly/flyctl-actions/setup-flyctl@master
        if: ${{ matrix.condition }}

      - name: Deploy ${{ matrix.app }} to Production
        if: ${{ matrix.condition }}
        run: flyctl deploy --remote-only --config ${{ matrix.config }} --dockerfile ${{ matrix.dockerfile }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
